name: Docker Image CI

on: push
# on:
#   push:
#     tags:
#       - '**'

jobs:
  build_wheel:
    name: Publication workflow
    runs-on: ubuntu-latest

    services:
      qdrant:
        image: qdrant/qdrant:latest
        env:
          QDRANT__SERVICE__API_KEY: ${{ secrets.QDRANT__SERVICE__API_KEY }}
          QDRANT__SERVICE__READ_ONLY_API_KEY: ${{ secrets.QDRANT__SERVICE__READ_ONLY_API_KEY }}
        ports:
          - 6333:6333

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: uv sync --all-extras --all-groups

      - name: Run tests
        # For example, using `pytest`
        run: uv run pytest
        env:
          LOGLEVEL: 'info'
          QDRANT_URL: http://localhost:6333
          QDRANT_QUERY_LIMIT: 25
          QDRANT__SERVICE__API_KEY: ${{ secrets.QDRANT__SERVICE__API_KEY }}
          QDRANT__SERVICE__READ_ONLY_API_KEY: ${{ secrets.QDRANT__SERVICE__READ_ONLY_API_KEY }}
          QDRANT_API_KEY: ${{ secrets.QDRANT__SERVICE__API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAPI_API_KEY }}
          DOCS_PATH: tests/inputs/docs
          EMAILS_PATH: tests/inputs/emails
          STATE_DB_PATH: .data/index_state.db
          COLLECTION_NAME: test
          DAV_ROOT: https://webdav.domain.tld
          EMBEDDING_MODEL: sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2
          EMBEDDING_MODEL_TRUST_REMOTE_CODE: false
          MIN_EXPECTED_CHAR: 100
          CHUNK_SIZE: 400
          CHUNK_OVERLAP: 80
          OCR_LANG: "fra+eng"
          OPEN_MODEL_PREF: 'gpt-4o'
          TORCH_NUM_THREADS: 3

      - name: Build wheel and install
        run: |
          uv build
          uv export --no-editable --no-emit-project -o requirements.txt > /dev/null

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Python wheel file
          path: |
            dist/*.whl
            requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ydethe/ragindexer

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
